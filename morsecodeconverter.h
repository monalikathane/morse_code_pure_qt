#ifndef MORSECODECONVERTER_H
#define MORSECODECONVERTER_H
#include <QMap>
#include <QString>

class MorseCodeConverter  final
{
public:
    explicit MorseCodeConverter() = default;
    QString CodeToText(const QString &);
    QString TextToCode(QString &);
private:
    QMap<QString, QChar> morseCodes{
        { "._"  , 'A' }, { "_."  , 'N' },
        { "_...", 'B' }, { "___" , 'O' },
        { "_._.", 'C' }, { ".__.", 'P' },
        { "_.." , 'D' }, { "__._", 'Q' },
        { "."   , 'E' }, { "._." , 'R' },
        { ".._.", 'F' }, { "..." , 'S' },
        { "__." , 'G' }, { "_"   , 'T' },
        { "....", 'H' }, { ".._" , 'U' },
        { ".."  , 'I' }, { "..._", 'V' },
        { ".___", 'J' }, { ".__" , 'W' },
        { "_._" , 'K' }, { "_.._", 'X' },
        { "._..", 'L' }, { "_.__", 'Y' },
        { "__"  , 'M' }, { "__..", 'Z' },

        { ".____", '1' }, { "_....", '6' },
        { "..___", '2' }, { "__...", '7' },
        { "...__", '3' }, { "___..", '8' },
        { "...._", '4' }, { "____.", '9' },
        { ".....", '5' }, { "_____", '0' },

        { "._._._",  '.' }, { "_._.__",  '!' },
        { "__..__",  ',' }, { "_...._",  '-' },
        { ".____.", '\'' }, { "._._." ,  '+' },
        { "._.._.",  '"' }, { "_.._." ,  '/' },
        { "..__._",  '_' }, { "_.__." ,  '(' },
        { "___...",  ':' }, { "_.__._",  ')' },
        { "_._._.",  ';' }, { "_..._" ,  '=' },
        { "..__..",  '?' }, { ".__._.",  '@' } };

};

#endif // MORSECODECONVERTER_H
